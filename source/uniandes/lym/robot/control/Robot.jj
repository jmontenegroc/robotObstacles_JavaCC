/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<T_MOVER:  "Move">
		| 	<T_TURN: "Turn">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		|  < T_POP: "Pop" >
		| < T_run : "Run" >
		| < PI:"(" >
		| < PD: ")" >
		| < FACE: "face" >
		| < IF: "if" >
		| < NOT: "not" >
		| < DEFVAR: "defvar" >
		| < UNIFY :"=" >
		| < DEFUN :"defun" >
		| < MOVEDIR :"move-dir" >
		|  < RUNDIR: "run-dirs" >
		|  < MOVE_FACE: "move-face" >
		| < LOOP: "loop" >
		
}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	
}

TOKEN : /* CONSTANTE */
{
		<NORTH:"North" >
		| < SOUTH: "South" >
		| < EAST: "East" >
		| < WEST: "West" > 
}

TOKEN:
{
		< LEFT:"left" >
		|< RIGHT: "right" >
		| < AROUND: "around" >
		| < FRONT: "front" >
		|	< BACK: "back" >
		
}

TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		< WORD: (< LETTER >)+ >
		| < #LETTER: ["a"-"z"] >	
}


	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		salida=new String();
		
	}
	
	{
		(
		  < DEFVAR > "(" l=palabra() ")" "(" x=numero() ")"; { salida= "Command: defvar";}
		| < UNIFY > "(" l= palabra() ")" "(" x=numero() ")"; { salida="Command: Assigment";}
		|<T_TURN><RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		|<T_TURN><LEFT> "(" ")" {world.turnRight();world.turnRight();world.turnRight();salida = "Command: Turnleft";}
		|<T_TURN><AROUND> "(" ")" {world.turnRight();world.turnRight();salida = "Command: Turnaround";}
		| <T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Command: Moveforward ";}
		| <FACE> <NORTH > "(" faceNorth() ")"
		| <FACE> <SOUTH>  "(" faceNorth() ")"
		| <FACE> <EAST>  "(" faceNorth() ")"
		| <FACE> <WEST>  "(" faceNorth() ")"
		|  <T_PONER> "("  objetoPoner() ")"					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"
		| < MOVEDIR > "(" x=numero() direccion(x)")"
		//| < RUNDIR > "(" dirs() ")"
		| < MOVE_FACE > "(" moveFace() ")"
	    |  < T_POP > "(" x=numero() ")" {world.popBalloons(x); salida = "Command:  Pop";}
		) "\n" 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

	void faceNorth():
	{
	  int f=1;
	}
	{
		g = world.getFacing()
		if (g.equalsIgnoreCase("NORTH")):
			( {salida="Command: FaceNorth";})
		else if (g.equalsIgnoreCase("SOUTH")):
			( {world.turnRight();
				world.turnRight();
				salida= "Command: FaceNorth";})
		else if(g.equalsIgnoreCase("EAST")):
			( {world.turnRight();
				salida= "Command: FaceNorth";})
		else if(g.equalsIgnoreCase("WEST")):
		({world.turnRight();
		  	world.turnRight();
		 	 world.turnRight();
				salida= "Command: FaceNorth"; })		  
	}


	void faceSouth():
	{
	  int f=1;
	}
	{
		g = world.getFacing()
		if (g.equalsIgnoreCase("SOUTH")):
			({salida="Command: FaceSouth";})
		else if(g.equalsIgnoreCase("NORTH")):
			( {world.turnRight();
				world.turnRight();
				salida= "Command: FaceSouth";})
		else if(g.equalsIgnoreCase("WEST")):
			( {world.turnRight();
				salida= "Command: FaceSouth";})
		else if(g.equalsIgnoreCase("EAST")):
		({world.turnRight();
		  	world.turnRight();
		 	 world.turnRight();
				salida= "Command: FaceSouth"; })		  
	}

	
	void faceWest():
	{
	  int f=1;
	}
	{
		g = world.getFacing()
		if (g.equalsIgnoreCase("WEST")):
			({salida="Command: FaceWest";})
		else if(g.equalsIgnoresCase("EAST")):
			( {world.turnRight();
				world.turnRight();
				salida= "Command: FaceWest";})
		else if(g.equalsIgnoreCase("NORTH")):
			( {world.turnRight();
				salida= "Command: FaceWest";})
		else if(g.equalsIgnoreCase("SOUTH")):
		({world.turnRight();
		  	world.turnRight();
		 	 world.turnRight();
				salida= "Command: FaceWest"; })		  
	}

	void faceEast():
	{
	  int f=1;
	}
	{ 
		g = world.getFacing()
		if (g.equalsIgnoreCase("EAST")):
			( {salida="Command: FaceEast";})
		else if(g/equalsIgnoreCase("WEST")):
			( {world.turnRight();
				world.turnRight();
				salida= "Command: FaceEast";})
		else if(g.equalsIgnoreCase("SOUTH")):
			( {world.turnRight();
				salida= "Command: FaceEast";})
		else if(g.equalsIgnoreCase("NORTH")):
		({world.turnRight();
		  	world.turnRight();
		 	 world.turnRight();
				salida= "Command: FaceEast"; })		  
	}


	void direccion(x):
	{
	  int f=1;
	}
	{
	  (		<FRONT> { world.moverForward(x); salida= "Command: MoveDir Front"; })
		| (<RIGHT> { world.turnRight(); world.moveForward(x); salida="Command: MoveDir Right" ;})
		| (<LEFT> { world.turnRight();world.turnRight();world.turnRight();world.moverForward(x);salidad="Command: Movedir Left" ;})
		| (<BACK >  { world.turnRight();world.turnRight(); world.moverForward(x); salida = "Command: MovDir Back" ;})
	 }


	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}


	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	void palabra():
	{
		String name;
	}
	{

	}

	void moveface():
	{
		int f = 1;
	}
	{
	  ( <NORTH> "," f=numero() "," faceNorth() { world.moveFoward(f); salida= "Command: MoveFace North"; })
	| (< SOUTH > "," f=numero() "," faceSouth() { world.moveFoward(f);salida="Command: MoveFace South"; })
	| (< WEST > "," f=numero() "," faceWest() { world.moveFoward(f);salida="Command: MoveFace West"; })
	| (< EAST > "," f=numero() "," faceEast() { world.moveFoward(f);salida="Command: MoveFace East"; })
	}


	void conditional ():
	{
		int x; 
	}
	{
		(< IF > "(" condicion() ")" block1 block2 )
	}

	boolean condicion(


	
	void bloques():
	{}
	{
		( "(" + command() + ")" )	
	}


	void repeat()
	{}
	{
			< LOOP >  while ( condition() != True) {
			  bloque
			}
			
	}
	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	